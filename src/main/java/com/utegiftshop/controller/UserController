package com.utegiftshop.controller;

import com.utegiftshop.entity.User;
import com.utegiftshop.repository.UserRepository;
import com.utegiftshop.security.service.UserDetailsImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority; // Import thêm
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map; // Import thêm
import java.util.Optional;
import java.util.stream.Collectors; // Import thêm


// *** TẠO CONTROLLER NÀY ĐỂ XỬ LÝ YÊU CẦU LẤY THÔNG TIN USER HIỆN TẠI ***
@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    UserRepository userRepository; // Inject UserRepository

    @GetMapping("/me")
    public ResponseEntity<?> getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        // Kiểm tra xem người dùng đã được xác thực chưa và có đúng là UserDetailsImpl không
        if (authentication == null || !authentication.isAuthenticated() || !(authentication.getPrincipal() instanceof UserDetailsImpl)) {
            // Nếu chưa xác thực, trả về lỗi 401 Unauthorized
            return ResponseEntity.status(401).body("Yêu cầu xác thực.");
        }

        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();

        // Lấy thông tin cơ bản từ UserDetailsImpl (an toàn hơn là load lại từ DB và trả cả entity)
        // Bạn CÓ THỂ load lại User từ DB nếu cần thông tin không có trong UserDetailsImpl
        // nhưng HÃY CẨN THẬN không trả về mật khẩu hoặc thông tin nhạy cảm khác.
        // Optional<User> userOpt = userRepository.findById(userDetails.getId());
        // if (userOpt.isPresent()){ ... }

        // Trả về một Map chứa thông tin cơ bản, an toàn
        return ResponseEntity.ok(Map.of(
            "id", userDetails.getId(),
            "email", userDetails.getUsername(), // getUsername() trả về email
            // Lấy fullName từ DB nếu cần, ở đây tạm dùng placeholder
            // Cần lấy user từ DB để có fullName chính xác:
            "fullName", userRepository.findById(userDetails.getId()).map(User::getFullName).orElse("N/A"),
            "role", userDetails.getAuthorities().stream()
                                  .map(GrantedAuthority::getAuthority)
                                  .collect(Collectors.joining()) // Lấy tên Role đầu tiên
        ));
    }
}